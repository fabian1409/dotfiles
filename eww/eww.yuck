; radial progress bar
(defwidget progressBar [value text class ?textClass]
  (circular-progress :class class 
    :value value 
    :thickness 10
    :start-at 25
    (box :class textClass text)
  )
)

(defwidget cpu[]
  (progressBar
    :value {EWW_CPU.avg} 
    :text {round(EWW_CPU.avg, 0)}
    :class 'gauge'
    :textClass 'percentText'
  )
)

(defwidget gpu[]
  (progressBar
    :value {gpu_util} 
    :text {gpu_util}
    :class 'gauge'
    :textClass 'percentText'
  )
)

(defwidget ram[]
  (progressBar
    :value {EWW_RAM.used_mem_perc} 
    :text {round(EWW_RAM.used_mem_perc, 0)}
    :class 'gauge'
    :textClass 'percentTextSmall'
  )
)

(defwidget sensor_panel [] 
  (box :orientation "v" :space-evenly "false"
    (box :orientation "h" :space-evenly "true" 
      (box :orientation "v" :class "cpu" :space-evenly "false" :style "margin-right: 10px"
        (box :orientation "h" :class "header" :space-evenly "false"
          ; (box :class "icon" "󰻠")
          (box :class "title" "R7 7700X")
        )
        (box :orientation "h"
          (cpu)
          (box :orientation "v" :space-evenly "false"
            (scale :min 0 :active "false" :max 101 :value {cpu_temp})
            (box :class "label" :space-evenly "false" "Temp " {cpu_temp} "°C")
            (scale :min 0 :active "false" :max 5500 :value {EWW_CPU.cores[0].freq})
            (box :class "label" :space-evenly "false" "Clock " {round(EWW_CPU.cores[0].freq / 1000, 1)} "GHz")
          )
        )
      )
      (box :orientation "v" :class "gpu" :space-evenly "false" 
        (box :orientation "h" :class "header" :space-evenly "false"
          ; (box :class "icon" "󰢮")
          (box :class "title" "RTX 4060 Ti")
        )    
        (box :orientation "h"
          (gpu)
          (box :orientation "v" :space-evenly "false"
            (scale :min 0 :active "false" :max 101 :value {gpu_temp})
            (box :class "label" :space-evenly "false" "Temp " {gpu_temp} "°C")
            (scale :min 0 :active "false" :max 2000 :value {gpu_freq})
            (box :class "label" :space-evenly "false" "Clock " {round(gpu_freq / 1000, 2)} "GHz")
          )
        )     
      )
    )
    (box :orientation "h" :space-evenly "true" 
      (box :orientation "v" :class "ram" :space-evenly "false" :style "margin-right: 10px"
        (box :orientation "h" :class "header" :space-evenly "false"
          ; (box :class "iconSmall" "󰘚")
          (box :class "titleSmall" "RAM 32GB")
        )
        (box :style "min-height: 110px"
          (ram)  
        )
      )
      (box :orientation "v" :class "ram" :space-evenly "false" :style "margin-right: 10px"
        (box :orientation "h" :class "header" :space-evenly "false"
          ; (box :class "iconSmall" "󰌗")
          (box :class "titleSmall" "Network")
        )
        (box :orientation "h" :space-evenly "false"
          (box :class "arrow" "")
          (box :class "titleSmall" {round(EWW_NET["eno1"].NET_UP / 1000, 0)}"kB/s")
        )
        (box :orientation "h" :space-evenly "false"
          (box :class "arrow" "")
          (box :class "titleSmall" {round(EWW_NET["eno1"].NET_DOWN / 1000, 0)}"kB/s")
        )
      )
      (box :orientation "v" :class "ram" :space-evenly "false" 
        (box :orientation "h" :class "header" :space-evenly "false"
          ; (box :class "iconSmall" "󰋊")
          (box :class "titleSmall" "Storage")
        ) 
        (box :orientation "v" :space-evenly "false"
          (box :orientation "h" :class "ssd" :space-evenly "false"
            (box :class "label" "SSD")
            (scale :min 0 :active "false" :max 101 :value {EWW_DISK["/"].used_perc})
          )
        )
      )
    )
  )
)

(defpoll cpu_temp :interval "1s" "scripts/get_cpu_temp")
(defpoll gpu_temp :interval "1s" "scripts/get_gpu_temp")
(defpoll gpu_util :interval "1s" "scripts/get_gpu_util")
(defpoll gpu_freq :interval "1s" "scripts/get_gpu_freq")

(defwindow sensor_panel :monitor 0 :geometry (geometry :x "0" :y "0" :width "800px" :height "480px")
  (sensor_panel)
)
   
